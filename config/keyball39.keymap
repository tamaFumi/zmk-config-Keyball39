#define DEFAULT 0
#define NUM     1
#define SYM     2
#define FUN     3
#define MOUSE   4
#define SCROLL  5
#define SNIPE   6

#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&lt {
    tapping-term-ms = <240>;
    flavor = "balanced";
    quick-tap-ms = <150>;
};

&mt {
    tapping-term-ms = <240>;
    flavor = "tap-preferred";
    quick-tap-ms = <150>;
};

&caps_word { continue-list = <UNDERSCORE MINUS>; };

/ {
    // custom shift using mod-morph 

    behaviors {
        cmqus: comma_question {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_QUESTION";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp QUESTION>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dtsmi: dot_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_SEMI";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp SEMI>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    macros {
        Hiragana: Hiragana {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(SPACE)>;
            label = "HIRAGANA";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "QWRT";
            bindings = <
&lt 6 Q      &kp W             &kp E           &kp R         &kp T                                  &kp Y        &kp U  &kp I            &kp O              &lt 5 P
&mt LCTRL A  &mt LEFT_SHIFT S  &mt LEFT_ALT D  &kp F         &kp G                                  &kp H        &kp J  &mt RIGHT_ALT K  &mt RIGHT_SHIFT L  &mt RCTRL MINUS
&kp Z        &kp X             &kp C           &kp V         &kp B                                  &kp N        &kp M  &kp COMMA        &lt 3 PERIOD       &lt 2 SLASH
&none        &none             &none           &lt 2 ESCAPE  &lt 1 SPACE  &lt 3 TAB  &kp BACKSPACE  &lt 1 ENTER                                             &none
            >;
        };

        number_layer {
            label = "NUM";
            bindings = <
&kp GRAVE              &kp KP_NUMBER_7             &kp KP_NUMBER_8           &kp KP_NUMBER_9  &kp LEFT_GUI                      &kp LS(F10)  &kp KP_PLUS  &kp KP_MINUS  &kp KP_ASTERISK  &kp KP_SLASH
&mt LCTRL KP_NUMBER_0  &mt LEFT_SHIFT KP_NUMBER_4  &mt LEFT_ALT KP_NUMBER_5  &kp KP_NUMBER_6  &msc SCRL_UP                      &mkp MB4     &mkp MB1     &kp UP_ARROW  &mkp MB2         &mkp MB3
&kp KP_DOT             &kp KP_NUMBER_1             &kp KP_NUMBER_2           &kp KP_NUMBER_3  &msc SCRL_DOWN                    &mkp MB5     &kp LEFT     &kp DOWN      &kp RIGHT        &kp PRINTSCREEN
&none                  &none                       &none                     &kp ESCAPE       &kp SPACE       &kp TAB  &kp DEL  &kp ENTER                                                &none
            >;
        };

        symbol_layer {
            label = "SYM";
            bindings = <
&kp LS(NUMBER_1)  &kp LS(NUMBER_2)  &kp LS(NUMBER_3)  &kp LS(NUMBER_4)  &kp LS(N5)                       &kp LS(NUMBER_6)  &kp LS(N7)        &kp LS(N8)  &kp LS(N9)        &kp INTERNATIONAL_3
&kp LCTRL         &kp LEFT_SHIFT    &kp LEFT_ALT      &none             &kp RIGHT_BRACKET                &kp BACKSLASH     &kp LEFT_BRACKET  &kp PLUS    &kp SINGLE_QUOTE  &kp SEMICOLON
&none             &none             &none             &none             &none                            &none             &none             &none       &none             &kp INT1
&none             &none             &none             &none             &none              &none  &none  &none                                                             &none
            >;
        };

        function_layer {
            label = "FUN";
            bindings = <
&kp F1        &kp F2         &kp F3           &kp F4   &none                   &none   &kp HOME  &kp PAGE_UP    &kp PAGE_DOWN  &kp END
&mt LCTRL F5  &mt LSHIFT F6  &mt LEFT_ALT F7  &kp F8   &none                   &none   &none     &kp RIGHT_ALT  &kp RSHIFT     &kp RCTRL
&kp F9        &kp F10        &kp F11          &kp F12  &none                   &none   &none     &none          &none          &none
&none         &none          &none            &trans   &trans  &trans  &trans  &trans                                          &trans
            >;
        };

        mouse_layer {
            label = "MOUSE";
            bindings = <
&kp N1          &kp N2          &kp N3        &kp N4     &kp N5                &kp N6    &kp N7     &kp N8    &kp N9     &kp N0
&kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT  &none                 &mkp MB4  &mkp LCLK  &kp UP    &mkp RCLK  &mkp MCLK
&none           &none           &none         &none      &none                 &mkp MB5  &kp LEFT   &kp DOWN  &kp RIGHT  &none
&none           &none           &none         &none      &none   &none  &none  &none                                     &none
            >;
        };

        scroll_layer {
            label = "SCROLL";
            bindings = <
&trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans                          &trans
            >;
        };

        snipe_layer {
            label = "SNIPE";
            bindings = <
&trans  &bt BT_NXT  &bt BT_PRV  &bt BT_CLR  &bootloader                  &trans  &trans  &trans  &trans  &trans
&trans  &trans      &trans      &trans      &trans                       &trans  &trans  &trans  &trans  &trans
&trans  &trans      &trans      &trans      &trans                       &trans  &trans  &trans  &trans  &trans
&trans  &trans      &trans      &trans      &trans       &trans  &trans  &trans                          &trans
            >;
        };
    };
};
